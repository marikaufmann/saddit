// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}
enum VoteType {
  UP
  DOWN
}
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
   id                String         @id @default(cuid())
  name              String?
  email             String?        @unique
  emailVerified     DateTime?
  createdSubsaddits Subsaddit[]    @relation("CreatedBy")
  subscriptions     Subscription[]
  votes             Vote[]

  username String? @unique

  image       String?
  accounts    Account[]
  sessions    Session[]
  Post        Post[]
  Comment     Comment[]
  CommentVote CommentVote[]
}

model Subsaddit {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]

  creatorId   String?
  Creator     User?          @relation("CreatedBy", fields: [creatorId], references: [id])
  subscribers Subscription[]

  @@index([name])
}

model Post {
  id String @id @default(cuid())
  title String
  content Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId String
  author User @relation(fields: [authorId], references: [id])
  subsadditId String
  subsaddit Subsaddit @relation(fields: [subsadditId], references: [id])
  comments Comment[]
  votes Vote[]
}

model Subscription {
  userId String
  user User @relation(fields: [userId], references: [id])
  subsadditId String
  subsaddit Subsaddit @relation(fields: [subsadditId], references: [id], onDelete: Cascade)
  @@id([userId, subsadditId])
}


model Vote {
  type VoteType
  userId String
  user User @relation(fields: [userId], references: [id])
  postId String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
}
model CommentVote {
  type VoteType
  userId String
  user User @relation(fields: [userId], references: [id])
  commentId String
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  @@id([userId, commentId])

}
model Comment {
  id String @id @default(cuid())
  text String
  createdAt DateTime @default(now())
  authorId String
  author User @relation(fields: [authorId], references: [id])
  postId String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  votes CommentVote[]
  replies Comment[] @relation("ReplyTo")
  replyToId String?
  replyTo Comment? @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)

}
